//教授的课
/*#include <iostream>
using namespace std;
const int MAXN = 1005;
int IsCancel(int a[], int n, int k) {
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        int temp;
        cin >> temp;
        if (temp <= 0) {
            cnt++;
        }
    }
    if (cnt < k) {
        return 1;
    } else {
        return 0;
    }
}
int main() {
    int n, k;
    cin >> n >> k;
    if (IsCancel(NULL, n, k)) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }
    return 0;
}*/

//指针排序
/*#include <iostream>
using namespace std;
int sort(int num[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (num[i] > num[j]) {
                swap(num[i], num[j]);
            }
        }
    }
    for (int i = 0; i < n; i++) {
        cout << num[i];
        if (i != n - 1) {
            cout << " ";
        }
    }
    cout << endl;
    return 0;
}
int main() {
    int n;
    cin >> n;
    int num[105];
    for (int i = 0; i < n; i++) {
        cin >> num[i];
    }
    sort(num, n);
    return 0;
}*/

// 字符串比较
/*#include <iostream>
#include <cstring>
using namespace std;
const int MAXN = 10005;
int next[MAXN];
void getNext(const char* s, int len) {
    int j = -1;
    next[0] = -1;
    for (int i = 1; i < len; i++) {
        while (j >= 0 && s[i] != s[j + 1]) {
            j = next[j];
        }
        if (s[i] == s[j + 1]) {
            j++;
        }
        next[i] = j;
    }
}
int kmp(const char* s1, const char* s2, int len1, int len2) {
    getNext(s2, len2);
    int j = -1;
    for (int i = 0; i < len1; i++) {
        while (j >= 0 && s1[i] != s2[j + 1]) {
            j = next[j];
        }
        if (s1[i] == s2[j + 1]) {
            j++;
        }
        if (j == len2 - 1) {
            return i - j;
        }
    }
    return -1;
}
int main() {
    char s1[MAXN], s2[MAXN];
    cin.getline(s1, MAXN);
    cin.getline(s2, MAXN);
    int len1 = strlen(s1), len2 = strlen(s2);
    int pos = kmp(s2, s1, len2, len1);
    while (pos != -1) {
        cout << pos << " ";
        pos = kmp(s2, s1 + pos + 1, len2, len1 - pos - 1);
    }
    if (pos == -1) {
        cout << "-1" << endl;
    }
    return 0;
}*/

//密钥格式化
/*#include <iostream>
#include <string>
using namespace std;
int main() {
    string s;
    int k;
    cin >> s >> k;
    string res = "";
    int cnt = 0;
    for (int i = s.size() - 1; i >= 0; i--) {
        if (s[i] != '-') {
            if (cnt == k) {
                res = "-" + res;
                cnt = 0;
            }
            res = (char)toupper(s[i]) + res;
            cnt++;
        }
    }
    cout << res << endl;
    return 0;
}*/

//标准电话号码
/*#include <iostream>
#include <string>
using namespace std;
const string KEYBOARD[] = {"", "", "ABC", "DEF", "GHI", "JKL", "MNO", "PQRS", "TUV", "WXYZ"};
int main() {
    string s;
    cin >> s;
    for (int i = 0; i < s.size(); i++) {
        for (int j = 2; j <= 9; j++) {
            if (KEYBOARD[j].find(s[i]) != string::npos) {
                cout << j;
                break;
            }
        }
    }
    cout << endl;
    return 0;
}*/

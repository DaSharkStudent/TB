// 单词长度
/*#include <iostream>
#include <string>
using namespace std;
int main() {
    string s;
    getline(cin, s);
    int len = 0;
    for (int i = 0; i < s.size(); i++) {
        if (s[i] == ' ' || s[i] == '\t') {
            if (len > 0) {
                cout << len << " ";
                len = 0;
            }
        } else {
            len++;
        }
    }
    if (len > 0) {
        cout << len << endl;
    }
    return 0;
}*/

//实现pow函数
/*#include <iostream>
using namespace std;
double mypow(double x, int n) {
    if (n == 0) {
        return 1;
    } else if (n == 1) {
        return x;
    } else if (n == -1) {
        return 1 / x;
    } else {
        double half = mypow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            if (n > 0) {
                return half * half * x;
            } else {
                return half * half * (1 / x);
            }
        }
    }
}
int main() {
    double x;
    int n;
    cin >> x >> n;
    cout << mypow(x, n) << endl;
    return 0;
}*/

// 颠倒二进制位
/*#include <iostream>
#include <bitset>
using namespace std;
int main() {
    unsigned int n;
    cin >> n;
    bitset<32> bits(n);
    for (int i = 0; i < 16; i++) {
        bool temp = bits[i];
        bits[i] = bits[31 - i];
        bits[31 - i] = temp;
    }
    cout << bits.to_ulong() << endl;
    return 0;
}*/

//汉诺塔
/*#include <iostream>
using namespace std;
void hanoi(int n, char a, char b, char c) {
    if (n == 1) {
        cout << a << "->" << c << endl;
    } else {
        hanoi(n - 1, a, c, b);
        cout << a << "->" << c << endl;
        hanoi(n - 1, b, a, c);
    }
}
int main() {
    int n;
    cin >> n;
    hanoi(n, 'A', 'B', 'C');
    return 0;
}*/
